package app.groceryapp.ui.fragment.home.adapter;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseExpandableListAdapter;import com.bumptech.glide.Glide;import java.util.List;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.GridLayoutManager;import app.groceryapp.R;import app.groceryapp.data.model.api.response.category.Category;import app.groceryapp.data.model.api.response.category.SubCategory;import app.groceryapp.databinding.LayoutCategoryItemBinding;import app.groceryapp.databinding.LayoutSubCategoryChildItemBinding;import app.groceryapp.ui.custom.DividerColorItemDecoration;import app.groceryapp.utils.AppUtils;public class CategorySubCategoryAdapter extends BaseExpandableListAdapter {    private CategorySubCategoryAdapterListener listener;    private List<Category> categoryList;    private final static int SPAN_COUNT = 3;    public interface CategorySubCategoryAdapterListener {        void onSubCategoryItemClick(Category category, SubCategory subCategory);    }    public CategorySubCategoryAdapter(List<Category> categoryList, CategorySubCategoryAdapterListener listener) {        this.categoryList = categoryList;        this.listener = listener;    }    @Override    public int getGroupCount() {        return categoryList.size();    }    @Override    public int getChildrenCount(int groupPosition) {        return 1; //categoryList.get(groupPosition).getSubCategoryList().size();    }    @Override    public Category getGroup(int groupPosition) {        return categoryList.get(groupPosition);    }    @Override    public SubCategory getChild(int groupPosition, int childPosition) {        return categoryList.get(groupPosition).getSubCategoryList().get(childPosition);    }    @Override    public long getGroupId(int groupPosition) {        return groupPosition;    }    @Override    public long getChildId(int groupPosition, int childPosition) {        return childPosition;    }    @Override    public boolean hasStableIds() {        return true;    }    @Override    public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {        GroupViewHolder groupViewHolder;        if (convertView == null) {            LayoutCategoryItemBinding categoryItemBinding = LayoutCategoryItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false);            convertView = categoryItemBinding.getRoot();            groupViewHolder = new GroupViewHolder(categoryItemBinding);            convertView.setTag(groupViewHolder);        }        groupViewHolder = (GroupViewHolder) convertView.getTag();        groupViewHolder.bindData(groupPosition, isExpanded);        return convertView;    }    @Override    public View getChildView(int groupPosition, int childPosition,                             boolean isLastChild, View convertView, ViewGroup parent) {        ChildViewHolder childViewHolder;        if (convertView == null) {            LayoutSubCategoryChildItemBinding subCategoryChildItemBinding = LayoutSubCategoryChildItemBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false);            convertView = subCategoryChildItemBinding.getRoot();            childViewHolder = new ChildViewHolder(subCategoryChildItemBinding);            convertView.setTag(childViewHolder);        }        childViewHolder = (ChildViewHolder) convertView.getTag();        childViewHolder.bindData(groupPosition);        return convertView;    }    @Override    public boolean isChildSelectable(int i, int i1) {        return true;    }    public class GroupViewHolder {        private LayoutCategoryItemBinding categoryItemBinding;        GroupViewHolder(LayoutCategoryItemBinding categoryItemBinding) {            this.categoryItemBinding = categoryItemBinding;        }        void bindData(int groupPosition, boolean isExpanded) {            Category category = categoryList.get(groupPosition);            if (isExpanded) {                categoryItemBinding.ivArrow.setRotation(180);                categoryItemBinding.cvContent.setCardBackgroundColor(categoryItemBinding.getRoot().getContext().getResources().getColor(R.color.colorListBg));                categoryItemBinding.viewDivider.setVisibility(View.GONE);            } else {                categoryItemBinding.ivArrow.setRotation(0);                categoryItemBinding.cvContent.setCardBackgroundColor(categoryItemBinding.getRoot().getContext().getResources().getColor(R.color.colorListLight));                if (groupPosition == categoryList.size() - 1) {                    categoryItemBinding.viewDivider.setVisibility(View.GONE);                } else {                    categoryItemBinding.viewDivider.setVisibility(View.VISIBLE);                }                categoryItemBinding.viewDivider.setVisibility(View.VISIBLE);            }            categoryItemBinding.tvCategoryName.setText(category.getCategoryName());            categoryItemBinding.tvSubCategoryNames.setText(AppUtils.getSunCategoryNames(category));            Glide.with(categoryItemBinding.getRoot().getContext()).                load(category.getImageFullPath()).                animate(R.anim.fade_in).                into(categoryItemBinding.ivCategoryImage);        }    }    public class ChildViewHolder implements SubCategoryGridAdapter.SubCategoryGridAdapterListener {        private LayoutSubCategoryChildItemBinding subCategoryChildItemBinding;        private Category category;        ChildViewHolder(LayoutSubCategoryChildItemBinding subCategoryChildItemBinding) {            this.subCategoryChildItemBinding = subCategoryChildItemBinding;        }        void bindData(int groupPosition) {            category = categoryList.get(groupPosition);            SubCategoryGridAdapter subCategoryGridAdapter = new SubCategoryGridAdapter(category.getSubCategoryList(), this);            subCategoryChildItemBinding.rvSubCategory.setLayoutManager(new GridLayoutManager(subCategoryChildItemBinding.getRoot().getContext(), SPAN_COUNT));            setItemDecoration();            subCategoryChildItemBinding.rvSubCategory.setAdapter(subCategoryGridAdapter);        }        private void setItemDecoration() {            subCategoryChildItemBinding.rvSubCategory.addItemDecoration(new DividerColorItemDecoration(subCategoryChildItemBinding.getRoot().getContext(), DividerItemDecoration.HORIZONTAL));            subCategoryChildItemBinding.rvSubCategory.addItemDecoration(new DividerColorItemDecoration(subCategoryChildItemBinding.getRoot().getContext(), DividerItemDecoration.VERTICAL));        }        @Override        public void onSubCategoryItemClick(SubCategory subCategory) {            if(listener != null) {                listener.onSubCategoryItemClick(category, subCategory);            }        }    }}