package app.groceryapp.ui.fragment.product;import android.content.Context;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import org.jetbrains.annotations.NotNull;import java.util.ArrayList;import java.util.List;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.recyclerview.widget.DividerItemDecoration;import app.groceryapp.data.model.api.response.category.SubCategory;import app.groceryapp.data.model.api.response.product.Product;import app.groceryapp.data.model.api.response.product.Products;import app.groceryapp.databinding.FragmentProductListBinding;import app.groceryapp.ui.base.BaseFragment;import app.groceryapp.ui.custom.DividerColorItemDecoration;import app.groceryapp.ui.fragment.product.adapter.ProductListAdapter;import app.groceryapp.utils.CommonUtils;import app.groceryapp.utils.constants.BundleConstants;public class ProductListFragment extends BaseFragment<ProductListFragmentViewModel> implements iProductListFragmentContract.iProductListFragmentNavigator {    private FragmentProductListBinding binding;    private ProductListFragmentViewModel viewModel;    private ProductListAdapter productListAdapter;    private SubCategory subCategory;    private Products products;    private List<Product> productList = new ArrayList<>();    private int childCategoryPosition;    private int nextPageToLoad = 0;    @Override    public void onAttach(@NotNull Context context) {        super.onAttach(context);    }    public static ProductListFragment newInstance(SubCategory subCategory, int position) {        ProductListFragment fragment = new ProductListFragment();        Bundle args = new Bundle();        args.putString(BundleConstants.INTENT_SUB_CATEGORY, CommonUtils.convertObjToJson(subCategory));        args.putInt(BundleConstants.INTENT_CHILD_CATEGORY_POSITION, position);        fragment.setArguments(args);        return fragment;    }    @Override    public void setViewModel() {        viewModel = (ProductListFragmentViewModel) prepareViewModel(ProductListFragmentViewModel.class);    }    @Override    public void setNavigator() {        viewModel.setNavigator(this);    }    public View onCreateView(@NonNull LayoutInflater inflater,                             ViewGroup container, Bundle savedInstanceState) {        binding = FragmentProductListBinding.inflate(inflater, container, false);        return binding.getRoot();    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        getBundleData();        prepareProductListAdapter();    }    @Override    public void onResume() {        super.onResume();        callGetProductSApi();    }    private void callGetProductSApi() {        viewModel.getProducts(subCategory, getChildCategoryId(), nextPageToLoad);    }    private void prepareProductListAdapter() {        productListAdapter = new ProductListAdapter(productList);        binding.rvProductList.addItemDecoration(new DividerColorItemDecoration(getBaseActivity(), DividerItemDecoration.VERTICAL));        binding.rvProductList.setAdapter(productListAdapter);    }    private void refreshProductListAdapter() {        if (productListAdapter == null) {            prepareProductListAdapter();        }        productListAdapter.notifyDataSetChanged();    }    private int getChildCategoryId() {        if (childCategoryPosition == 0) {            return 0;        }        return subCategory.getSubSubCategoryList().get(childCategoryPosition - 1).getSubSubCategoryId();    }    private void getBundleData() {        if (getArguments() != null) {            childCategoryPosition = getArguments().getInt(BundleConstants.INTENT_CHILD_CATEGORY_POSITION, 0);            subCategory = CommonUtils.convertJsonToObj(getArguments().getString(BundleConstants.INTENT_SUB_CATEGORY), SubCategory.class);        }    }    @Override    public void updateProducts(@NotNull Products products) {        this.products = products;        if (products.getProductList() != null) {            productList.addAll(products.getProductList());        }        nextPageToLoad = products.getCurrentPage() + 1;        this.products.setProductList(productList);        refreshProductListAdapter();    }}